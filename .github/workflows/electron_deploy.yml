name: Build and Release (electron)

on:
  push:
    tags: [ release-electron* ]


jobs:
  mac_deploy:
    runs-on: macos-latest

    strategy:
      matrix:
        node-versions: ["16.14.0"]

    steps:
      - name: "Checkout Project"
        uses: actions/checkout@v2

      - name: Set env
        run: |
          release_version=${GITHUB_REF#refs/*/}
          export VERSION=${release_version:17}
          export VERSION_SHORT=$(echo $VERSION | sed 's/\.//g')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_SHORT=$VERSION_SHORT" >> $GITHUB_ENV
          cp ./quasar.conf.mac.js ./quasar.conf.js

      # - name: "Import Certificates"
      #   run: |
      #     echo -n ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }} | base64 --decode --output certificate.p12
      #     export KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain
      #     security create-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} $KEYCHAIN_PATH
      #     security import certificate.p12 -P ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }} -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Setup NodeJS Environment ${{ matrix.node-versions }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: "Install Node Module"
        run: yarn install && yarn add @quasar/cli

      - name: "Build and Package"
        run: ./node_modules/@quasar/app/bin/quasar build -m electron -P always

      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: |
      #       ./dist/electron/Packaged/paperlib-${{ env.VERSION }}.dmg
      #     draft: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Oracle Cloud CLI
        run: |
          brew install oci-cli && mkdir ~/.oci
          echo -n ${{ secrets.OCI_CFG_DATA }} | base64 --decode --output config
          mv config ~/.oci
          echo -n ${{ secrets.OCI_KEY_DATA }} | base64 --decode --output oraclekey.cer
          mv oraclekey.cer ~/.oci

      - name: Upload to Oracle Storage
        run: |
          oci os object put --bucket-name ${{ secrets.OCI_OS_BUCKET }} --file ./dist/electron/Packaged/paperlib-${{ env.VERSION }}.dmg --namespace ${{ secrets.OCI_OS_NAMESPACE }} --force --name distribution/electron-mac/paperlib-${{ env.VERSION }}.dmg
          oci os object put --bucket-name ${{ secrets.OCI_OS_BUCKET }} --file ./dist/electron/Packaged/paperlib-${{ env.VERSION }}.dmg --namespace ${{ secrets.OCI_OS_NAMESPACE }} --force --name distribution/electron-mac/latest.dmg
          oci os object put --bucket-name ${{ secrets.OCI_OS_BUCKET }} --file ./dist/electron/Packaged/paperlib-${{ env.VERSION }}.dmg.blockmap --namespace ${{ secrets.OCI_OS_NAMESPACE }} --force --name distribution/electron-mac/paperlib-${{ env.VERSION }}.dmg.blockmap
          oci os object put --bucket-name ${{ secrets.OCI_OS_BUCKET }} --file ./dist/electron/Packaged/latest.yml --namespace ${{ secrets.OCI_OS_NAMESPACE }} --force --name distribution/electron-mac/latest.yml

  win_deploy:
    runs-on: windows-latest

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        node-versions: ["16.14.0"]

    steps:
      - name: "Checkout Project"
        uses: actions/checkout@v2

      - name: Set env
        run: |
          release_version=${GITHUB_REF#refs/*/}
          export VERSION=${release_version:17}
          export VERSION_SHORT=$(echo $VERSION | sed 's/\.//g')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_SHORT=$VERSION_SHORT" >> $GITHUB_ENV
          cp ./quasar.conf.win.js ./quasar.conf.js

      - name: Setup NodeJS Environment ${{ matrix.node-versions }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: "Install Node Module"
        run: yarn install && yarn add @quasar/cli

      - name: "Build and Package"
        run: ./node_modules/@quasar/app/bin/quasar build -m electron -P always

      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: |
      #       ./dist/electron/Packaged/paperlib Setup ${{ env.VERSION }}.exe
      #     draft: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Oracle Cloud CLI
        run: |
          wget https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.ps1
          ./install.ps1 -OfflineInstall
          mkdir ~/.oci
          echo -n ${{ secrets.OCI_CFG_DATA }} | base64 --decode --output config
          mv config ~/.oci
          echo -n ${{ secrets.OCI_KEY_DATA }} | base64 --decode --output oraclekey.cer
          mv oraclekey.cer ~/.oci

      - name: Upload to Oracle Storage
        run: |
          oci os object put --bucket-name ${{ secrets.OCI_OS_BUCKET }} --file './dist/electron/Packaged/paperlib Setup ${{ env.VERSION }}.exe' --namespace ${{ secrets.OCI_OS_NAMESPACE }} --force --name 'distribution/electron-win/paperlib Setup ${{ env.VERSION }}.exe'
          oci os object put --bucket-name ${{ secrets.OCI_OS_BUCKET }} --file './dist/electron/Packaged/paperlib Setup ${{ env.VERSION }}.exe' --namespace ${{ secrets.OCI_OS_NAMESPACE }} --force --name distribution/electron-win/latest.exe
          oci os object put --bucket-name ${{ secrets.OCI_OS_BUCKET }} --file './dist/electron/Packaged/paperlib Setup ${{ env.VERSION }}.exe.blockmap' --namespace ${{ secrets.OCI_OS_NAMESPACE }} --force --name distribution/electron-mac/paperlib-${{ env.VERSION }}.dmg.blockmap
          oci os object put --bucket-name ${{ secrets.OCI_OS_BUCKET }} --file ./dist/electron/Packaged/latest.yml --namespace ${{ secrets.OCI_OS_NAMESPACE }} --force --name distribution/electron-win/latest.yml
